{"ast":null,"code":"import { ADD_ARTICLE } from '../constants/action-types';\nconst forbiddenWords = [\"spam\", \"money\"];\n\nfunction forbiddenWordsMiddleware({\n  dispatch\n}) {\n  return next => action => {\n    if (action.type === ADD_ARTICLE) {\n      const foundWord = forbiddenWords.filter(word => {\n        const include = action.payload.title.includes(word);\n        console.log(action.payload.title.includes(word), include);\n        return include;\n      });\n\n      if (foundWord.length) {\n        return dispatch({\n          type: \"FOUND_BAD_WORD\"\n        });\n      }\n\n      return next(action);\n    }\n  };\n}\n\nexport default forbiddenWordsMiddleware;","map":{"version":3,"sources":["/Users/ryzm/Desktop/react-redux-tutorial/src/js/middleware/index.js"],"names":["ADD_ARTICLE","forbiddenWords","forbiddenWordsMiddleware","dispatch","next","action","type","foundWord","filter","word","include","payload","title","includes","console","log","length"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,2BAA1B;AACA,MAAMC,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,CAAvB;;AAGA,SAASC,wBAAT,CAAmC;AAACC,EAAAA;AAAD,CAAnC,EAA+C;AAC3C,SAAOC,IAAI,IAAIC,MAAM,IAAI;AACrB,QAAGA,MAAM,CAACC,IAAP,KAAgBN,WAAnB,EAA+B;AAC3B,YAAMO,SAAS,GAAGN,cAAc,CAACO,MAAf,CAAsBC,IAAI,IAAI;AAC5C,cAAMC,OAAO,GAAGL,MAAM,CAACM,OAAP,CAAeC,KAAf,CAAqBC,QAArB,CAA8BJ,IAA9B,CAAhB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACM,OAAP,CAAeC,KAAf,CAAqBC,QAArB,CAA8BJ,IAA9B,CAAZ,EAAiDC,OAAjD;AACA,eAAOA,OAAP;AACH,OAJiB,CAAlB;;AAKA,UAAGH,SAAS,CAACS,MAAb,EAAoB;AAChB,eAAOb,QAAQ,CAAC;AAACG,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAf;AACH;;AACD,aAAOF,IAAI,CAACC,MAAD,CAAX;AACH;AACJ,GAZD;AAaH;;AAED,eAAeH,wBAAf","sourcesContent":["import {ADD_ARTICLE} from '../constants/action-types'\nconst forbiddenWords = [\"spam\", \"money\"];\n\n\nfunction forbiddenWordsMiddleware ({dispatch}) {\n    return next => action => {\n        if(action.type === ADD_ARTICLE){\n            const foundWord = forbiddenWords.filter(word => {\n                const include = action.payload.title.includes(word)\n                console.log(action.payload.title.includes(word), include)\n                return include\n            })\n            if(foundWord.length){\n                return dispatch({type: \"FOUND_BAD_WORD\"})\n            }\n            return next(action)\n        }\n    }\n}\n\nexport default forbiddenWordsMiddleware"]},"metadata":{},"sourceType":"module"}