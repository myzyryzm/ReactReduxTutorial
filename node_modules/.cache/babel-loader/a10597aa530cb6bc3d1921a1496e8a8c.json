{"ast":null,"code":"import { ADD_ARTICLE } from '../constants/action-types';\nconst forbiddenWords = [\"spam\", \"money\"];\n\nfunction forbiddenWordsMiddleware({\n  dispatch\n}) {\n  return next => action => {\n    if (action.type === ADD_ARTICLE) {\n      console.log(forbiddenWords.length);\n      const foundWord = forbiddenWords.filter(word => {\n        console.log(action.payload.title.includes(word), word);\n        action.payload.title.includes(word);\n      });\n\n      if (foundWord.length) {\n        return dispatch({\n          type: \"FOUND_BAD_WORD\"\n        });\n      }\n\n      return next(action);\n    }\n  };\n}\n\nexport default forbiddenWordsMiddleware;","map":{"version":3,"sources":["/Users/ryzm/Desktop/react-redux-tutorial/src/js/middleware/index.js"],"names":["ADD_ARTICLE","forbiddenWords","forbiddenWordsMiddleware","dispatch","next","action","type","console","log","length","foundWord","filter","word","payload","title","includes"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,2BAA1B;AACA,MAAMC,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,CAAvB;;AAGA,SAASC,wBAAT,CAAmC;AAACC,EAAAA;AAAD,CAAnC,EAA+C;AAC3C,SAAOC,IAAI,IAAIC,MAAM,IAAI;AACrB,QAAGA,MAAM,CAACC,IAAP,KAAgBN,WAAnB,EAA+B;AAC3BO,MAAAA,OAAO,CAACC,GAAR,CAAYP,cAAc,CAACQ,MAA3B;AACA,YAAMC,SAAS,GAAGT,cAAc,CAACU,MAAf,CAAsBC,IAAI,IAAI;AAC5CL,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACQ,OAAP,CAAeC,KAAf,CAAqBC,QAArB,CAA8BH,IAA9B,CAAZ,EAAiDA,IAAjD;AACAP,QAAAA,MAAM,CAACQ,OAAP,CAAeC,KAAf,CAAqBC,QAArB,CAA8BH,IAA9B;AACH,OAHiB,CAAlB;;AAIA,UAAGF,SAAS,CAACD,MAAb,EAAoB;AAChB,eAAON,QAAQ,CAAC;AAACG,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAf;AACH;;AACD,aAAOF,IAAI,CAACC,MAAD,CAAX;AACH;AACJ,GAZD;AAaH;;AAED,eAAeH,wBAAf","sourcesContent":["import {ADD_ARTICLE} from '../constants/action-types'\nconst forbiddenWords = [\"spam\", \"money\"];\n\n\nfunction forbiddenWordsMiddleware ({dispatch}) {\n    return next => action => {\n        if(action.type === ADD_ARTICLE){\n            console.log(forbiddenWords.length)\n            const foundWord = forbiddenWords.filter(word => {\n                console.log(action.payload.title.includes(word), word)\n                action.payload.title.includes(word)\n            })\n            if(foundWord.length){\n                return dispatch({type: \"FOUND_BAD_WORD\"})\n            }\n            return next(action)\n        }\n    }\n}\n\nexport default forbiddenWordsMiddleware"]},"metadata":{},"sourceType":"module"}